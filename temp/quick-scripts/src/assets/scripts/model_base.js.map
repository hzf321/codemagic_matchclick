{"version":3,"sources":["assets/scripts/model_base.ts"],"names":[],"mappings":";;;;;;;AAEA,SAAgB,IAAI,CAAC,MAAW,EAAE,OAAe;IAC7C,IAAI,GAAG,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IACtD,IAAI,GAAG,KAAK,SAAS,EAAE;QACnB,GAAG,GAAG,EAAE,CAAC;QACT,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;KACpD;IACD,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACtB,CAAC;AAPD,oBAOC;AAGD;IAAA;IA4BA,CAAC;IA1BU,4BAAO,GAAd;QACI,IAAI,IAAI,GAAG,EAAE,CAAA;QACb,IAAI,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QACxD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACtC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;SACzC;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,4BAAO,GAAd,UAAe,IAAS;QACpB,eAAe;QACf,IAAI,CAAC,IAAI;YAAE,OAAO;QAClB,IAAI,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QACxD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;YACtC,IAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI,OAAO,IAAI,IAAI,IAAI,OAAO,IAAI,SAAS,EAAE;gBACzC,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,iBAAiB,EAAE;oBAC9D,KAAK,IAAM,GAAG,IAAI,OAAO,EAAE;wBACvB,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;qBACzC;iBACJ;;oBAEG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC;aACnC;SACJ;IACL,CAAC;IA1Ba,mBAAQ,GAAyB,IAAI,GAAG,EAAE,CAAC;IA2B7D,iBAAC;CA5BD,AA4BC,IAAA;kBA5BoB,UAAU","file":"","sourceRoot":"/","sourcesContent":["\n\nexport function save(target: any, keyName: string) {\n    let arr = model_base.classMap.get(target.constructor);\n    if (arr === undefined) {\n        arr = [];\n        model_base.classMap.set(target.constructor, arr);\n    }\n    arr.push(keyName);\n}\n\n\nexport default class model_base {\n    public static classMap: Map<Function, any[]> = new Map();\n    public getData(): object {\n        let data = {}\n        let savepars = model_base.classMap.get(this.constructor)\n        for (let i = 0; i < savepars.length; ++i) {\n            data[savepars[i]] = this[savepars[i]];\n        }\n        return data;\n    }\n\n    public setData(data: any) {\n        //初始化下数据       \n        if (!data) return;\n        let savepars = model_base.classMap.get(this.constructor)\n        for (let i = 0; i < savepars.length; ++i) {\n            const element = data[savepars[i]];\n            if (element != null || element != undefined) {\n                if (Object.prototype.toString.call(element) == \"[object Object]\") {\n                    for (const key in element) {\n                        this[savepars[i]][key] = element[key];\n                    }\n                }\n                else\n                    this[savepars[i]] = element;\n            }\n        }\n    }\n}\n"]}