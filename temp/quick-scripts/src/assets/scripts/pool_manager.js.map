{"version":3,"sources":["assets/scripts/pool_manager.ts"],"names":[],"mappings":";;;;;;;;;;;;AAGM,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAE5C;IAAA;QAGI,UAAK,GAAQ,EAAE,CAAC;QAChB,WAAM,GAAQ,EAAE,CAAA;IAiCpB,CAAC;IA/BG,2BAAI,GAAJ,UAAK,QAAQ,EAAC,GAAa;QAGvB,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,GAAG,CAAA;QAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YAC1B,IAAI,IAAI,GAAG,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,CAAA;YAC9B,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAAA;SAClC;QACD,QAAQ,IAAE,QAAQ,EAAE,CAAA;IACxB,CAAC;IAED,0BAAG,GAAH,UAAI,GAAW;QACX,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;YACzB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAA;SACtC;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;YAC5B,IAAI,MAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAA;YAChC,OAAO,MAAI,CAAC,YAAY,CAAC,MAAI,CAAC,IAAI,CAAC,CAAA;SACtC;QACD,IAAI,IAAI,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAA;QAC3C,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAEvC,CAAC;IACD,8BAAO,GAAP,UAAQ,GAAW,EAAE,IAAa;QAC9B,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;YACzB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,EAAE,CAAC,QAAQ,EAAE,CAAA;SACtC;QACD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;IAC7B,CAAC;IAlCgB,YAAY;QADhC,OAAO;OACa,YAAY,CAqChC;IAAD,mBAAC;CArCD,AAqCC,IAAA;kBArCoB,YAAY","file":"","sourceRoot":"/","sourcesContent":["\nimport game_helpers from \"./game_helpers\";\n\nconst { ccclass, property } = cc._decorator;\n@ccclass\nexport default class pool_manager {\n\n\n    pools: any = {};\n    resKey: any = {}\n\n    init(callback,res:cc.Prefab) \n    {\n\n        this.resKey['TileBlock'] = res\n        for (let i = 0; i < 100; i++) {\n            let node = cc.instantiate(res)\n            this.recover('TileBlock', node)\n        }\n        callback&&callback()\n    }\n\n    get(key: string) {\n        if (this.pools[key] == null) {\n            this.pools[key] = new cc.NodePool()\n        }\n        if (this.pools[key].size() > 0) {\n            let node = this.pools[key].get()\n            return node.getComponent(node.name)\n        }\n        let node = cc.instantiate(this.resKey[key])\n        return node.getComponent(node.name)\n\n    }\n    recover(key: string, node: cc.Node) {\n        if (this.pools[key] == null) {\n            this.pools[key] = new cc.NodePool()\n        }\n        this.pools[key].put(node)\n    }\n\n\n}\n\n\n"]}